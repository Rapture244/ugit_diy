# ==================================================================================================================== #
#                                                         PYTEST                                                       #
# ==================================================================================================================== #
# Core configuration for pytest test discovery, import resolution, output formatting, and strictness.
# Mirrors the style and rigor of our Pyright and Ruff configs. Placed at project root.

[pytest]

# -------------------------------------------------------------------------------------------------------------------- #
# TEST DISCOVERY
# -------------------------------------------------------------------------------------------------------------------- #
# Explicitly tell pytest where to find tests. src/ layout is handled by editable install, so no pythonpath hacking.
testpaths = tests

# Prefer editable install over pythonpath; keep this only if you don’t install the package during dev.
# pythonpath = src

# Auto-discover test files matching these patterns (default: test_*.py and *_test.py).
# Set explicitly for clarity and consistency with Ruff’s pytest-style rules.
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# -------------------------------------------------------------------------------------------------------------------- #
# BEHAVIOR & OUTPUT
# -------------------------------------------------------------------------------------------------------------------- #
# NOTE: full output requested (no -q).
# Verbose (-v), fail fast (-x), show short test summary info (-ra), be strict about config & markers, and force color.
addopts = -v -ra -x --strict-config --strict-markers --color=yes

# Require pytest >= 8.0 for compatibility with our pinned dev dependencies.
minversion = 8.0

# Console style: choose how pytest displays progress/output during test runs.
console_output_style = classic       # Line-by-line details for each test (most verbose, best for local debugging).
# console_output_style = progress    # (default) Compact output with a percentage-based progress indicator.
# console_output_style = count       # Compact output showing number of tests completed instead of percentage.
# console_output_style = times       # Shows test durations along with results, useful for spotting slow tests.


# -------------------------------------------------------------------------------------------------------------------- #
# STRICTNESS & CLEANLINESS
# -------------------------------------------------------------------------------------------------------------------- #
# Turn warnings into errors to catch deprecated or unsafe patterns early.
# (Can be relaxed to "default" if too strict for rapid iteration.)
filterwarnings =
    error

# Make xfail behave strictly (xfail without a reason/condition won’t silently pass).
xfail_strict = true

# Fail if any unknown markers are used (helps catch typos or unregistered markers early).
# You can register custom markers here as your suite grows.
markers =
    slow: marks tests as slow (skipped by default unless -m slow is specified)
    cli: marks CLI-related tests

# -------------------------------------------------------------------------------------------------------------------- #
# COVERAGE (Optional)
# -------------------------------------------------------------------------------------------------------------------- #
# If using pytest-cov, these settings keep reporting consistent with [tool.coverage] in pyproject.toml.
# They’re ignored if pytest-cov isn’t installed. You asked to keep them commented out for now.
# NOTE: We measure only the package source (not tests or deps).
# addopts = ... --cov=ugit_diy --cov-report=term-missing --cov-fail-under=85
# coverage_run_source = ugit_diy
# coverage_fail_under = 85
