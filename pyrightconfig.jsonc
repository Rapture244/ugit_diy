{
  // ==================================================================================================================
  //                                                    BASEDPYRIGHT
  // ==================================================================================================================
  // Strict, fast type checking for a src/ layout. Single source of truth for editors & CLI.
  //
  // Locale: force English diagnostics when running the CLI by setting an env var, e.g.:
  //   export LC_MESSAGES="en-us"   (or LC_ALL / LANG — basedpyright follows Pyright locale behavior)
  //
  // Optional: JSON schema (Pyright's is compatible and enables IntelliSense in many editors).
  "$schema": "https://raw.githubusercontent.com/microsoft/pyright/main/packages/pyright/schema/pyrightconfig.schema.json",

  // --- Environment / interpreter selection ---
  // Make Pyright CLI find your project-local venv: <root>/.venv
  "venvPath": ".",
  "venv": ".venv",

  // Target versions/platform (WSL/UNIX)
  "pythonVersion": "3.12",
  "pythonPlatform": "Linux",

  // --- Project layout ---
  // Analyze only what we own (faster, clearer). Use explicit roots instead of "."
  "include": ["src", "tests"],
  "exclude": [
    ".idea",
    ".vscode",
    ".venv",
    ".git",
    "**/__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
    "htmlcov",
    "node_modules",
    "**/.ipynb_checkpoints"
  ],

  // Use library code when stubs are missing (more practical in strict mode)
  "useLibraryCodeForTypes": true,

  // --- Strictness baseline ---
  // basedpyright rule-set: choose "all" for maximum strictness and make warnings fail the CLI.
  "typeCheckingMode": "all",
  "failOnWarnings": true,

  // --- Core diagnostics you wanted strict ---
  "reportMissingImports": "error",
  "reportMissingTypeStubs": "warning",             // keep practical; flip to "error" later if desired
  "reportUnreachable": "error",                    // prefer hard-failing unreachable code
  "reportUnnecessaryTypeIgnoreComment": "error",   // clean up stale ignores
  "reportIgnoreCommentWithoutRule": "error",       // require # pyright: ignore[rule] not blanket ignores
  "reportPrivateUsage": "error",
  "reportImplicitStringConcatenation": "error",

  // --- Additional strict but useful checks ---
  "reportMissingTypeArgument": "error",
  "reportIncompatibleVariableOverride": "error",
  "reportInvalidCast": "error",
  "reportImplicitRelativeImport": "error",         // pairs with Ruff ban on relative imports
  "reportPrivateLocalImportUsage": "error",

  // Hygiene / cleanup — escalate to hard errors (Ruff also helps here, duplication is OK tho)
  "reportUnusedImport": "error",
  "reportUnusedVariable": "error",
  "reportUnusedParameter": "error",
  // Encourage full typing without blocking iteration (warnings keep momentum)
  "reportUnknownVariableType": "warning",
  "reportUnknownParameterType": "warning",
  "reportUnknownArgumentType": "warning",
  "reportUnknownMemberType": "warning",
  "reportUntypedFunctionDecorator": "warning",

  // Inference & typing behavior (aligns with basedpyright strict philosophy)
  "strictListInference": true,
  "strictDictionaryInference": true,
  "strictSetInference": true,
  "strictParameterNoneValue": true,
  "deprecateTypingAliases": true,
  "disableBytesTypePromotions": true,

  // Optional but handy if you add custom stubs later (keep folder at repo root)
  "stubPath": "typings",

  // CLI noise toggle; enable when debugging import resolution.
  "verboseOutput": false,

  // --- Execution environments (robust for SRC layout) ---
  // Ensures imports like `import ugit_diy` work cleanly in editors and match installed behavior.
  "executionEnvironments": [
    {
      "root": ".",
      "extraPaths": ["src"],
      "pythonVersion": "3.12",
      "pythonPlatform": "Linux"
    },
    {
      "root": "tests",
      "extraPaths": ["src"],
      "pythonVersion": "3.12",
      "pythonPlatform": "Linux"
    }
  ]

  // ---------------------------------------------------------------------------------------------------------------
  // Optional toggles you can enable later:
  // - Suppress errors from site-packages (3rd-party libs w/o types):
  //   "ignoreExternal": true
  //
  // - Loosen tests only (e.g., basic mode in tests) by adding tests/pyrightconfig.jsonc:
  //   { "typeCheckingMode": "basic" }
  // ---------------------------------------------------------------------------------------------------------------
}
