# ==================================================================================================================== #
#                                                         RUFF                                                         #
# ==================================================================================================================== #
# Linter + formatter config in one place to avoid ruff.toml drift

# ==================================================================================================================== #
# GLOBAL SETTINGS
# - Think of this as "project wiring": paths, Python target, discovery rules, cache, and default behavior.
# - Nothing here changes rule *semantics*; it only controls which files are seen and how Ruff runs by default.
#   NOTE: In ruff.toml, keys live at the top level (no [tool.ruff] header).
# ==================================================================================================================== #

# --------------------------------------------- PATHS & DISCOVERY ---------------------------------------------------- #
# Files/folders Ruff should never process. Keep this tight to avoid scanning vendored or generated code.
exclude = [
  ".idea",
  ".vscode",
  ".git",
  ".venv",
  "__pycache__",
  ".ipynb_checkpoints",
  "build",
  "dist",
  "node_modules",
  "htmlcov"
]

# Respect excludes even if paths are passed explicitly (prevents surprises in CI and local scripts).
force-exclude = true

# Let Ruff (incl. its isort engine) know your code lives under src/ (so "import ugit_diy" resolves correctly).
src = ["src"]

# --------------------------------------------- PYTHON DIALECT / STYLE ------------------------------------------------ #
# Target Python version for rules that depend on syntax availability.
target-version = "py312"

# Style knobs used by both the linter and formatter (where applicable).
line-length = 120          # Match your project’s chosen line length (formatter honors this too).
indent-width = 4           # Tabs vs spaces is formatter-driven; here we state the expected width for diagnostics.

# ----------------------------------------------- PERFORMANCE / CACHE ------------------------------------------------ #
# Store Ruff’s cache in a predictable folder (easy to .gitignore and reuse in CI).
cache-dir = ".ruff_cache"

# --------------------------------------------------- EXECUTION DEFAULTS --------------------------------------------- #
# By default, run checks only (no writes). Opt into edits with `ruff --fix …` in CI/scripts when you want.
fix = false

# (Optional) Make CI logs easier to scan.
# output-format = "grouped"

# (Optional) Enforce a minimum Ruff version across machines.
required-version = ">=0.13.1"

# ==================================================================================================================== #
# RULESETS & BEHAVIOR
# ==================================================================================================================== #
[lint]
# Rule families included in linting:
# - E/W   : PEP8 style & whitespace rules (pycodestyle)
# - F     : Logic errors (undefined names, unused vars/imports) (pyflakes)
# - I     : Import sorting & cleanup (isort)
# - UP    : Modern Python syntax upgrades (pyupgrade)
# - B     : Bug and anti-pattern detection (flake8-bugbear)
# - COM   : Comma rules (trailing/missing commas, except COM812 left to formatter)
# - ISC   : Implicit string concatenation (avoid subtle bugs)
# - ICN   : Import naming conventions
# - PGH   : Pragma hygiene (valid / unnecessary `# noqa` and ignores)
# - RUF   : Ruff-specific best practices
# - D     : Docstring rules (pydocstyle, enforcing Google convention)
# - N     : Naming conventions (PEP8: ClassName, function_name, CONSTANT_CASE, etc.)
# - ARG   : Detect unused function arguments
# - SIM   : Simplify overly complex code (suggest cleaner idioms)
# - RET   : Ensure functions return consistently (all paths return or none do)
# - S     : Security checks (subset of Bandit rules, e.g. unsafe `eval`)
# - G     : Logging best practices (e.g. prefer lazy logging with `%s` or f-string)
# - T20   : Debug artifacts (e.g. `print`, `pdb` calls)
# - BLE   : Broad/bare excepts (catching `Exception` or no exception type)
# - PT    : Pytest best practices (parametrize, fixtures, etc.)
# - TCH   : Type-checking imports (organize imports inside `if TYPE_CHECKING`)
# - A     : Prevent shadowing Python builtins (don’t redefine `list`, `dict`, etc.)
# - DTZ   : Datetime usage (require timezone-aware datetimes)
# - TID   : Import hygiene (ban relative imports; see [lint.flake8-tidy-imports])
# - C4    : Comprehension idioms (flake8-comprehensions; more pythonic comps/gens)
# - PTH   : Prefer pathlib over os.path & friends (flake8-use-pathlib)
# - TRY   : Exception-handling best practices (tryceratops; complements BLE/B904)
# - RSE   : Raise statement style polish (minor consistency rules)
select = [
  "E", "W", "F", "I", "UP", "B", "COM", "ISC", "ICN", "PGH", "RUF", "D",
  "N", "ARG", "SIM", "RET", "S", "G", "T20", "BLE", "PT", "TCH", "A", "DTZ",
  "TID", "C4", "PTH", "TRY", "RSE"
]

# Let the formatter handle wrapping and trailing commas.
ignore = [
  "E501",   # line too long -> formatter decides
  "COM812"  # missing trailing comma -> formatter decides
]

# Auto-fix where safe (semantics-preserving edits only).
# - I: import sorting
# - UP: modern Python syntax upgrades
# - E/W: pycodestyle whitespace/indent/cosmetic fixes
# - COM: comma/whitespace tweaks
# - F401/F841: remove truly unused imports/variables
fixable = ["I", "UP", "E", "W", "COM", "F401", "F841"]

# Block categories that could change behavior or intent:
# - B: bugbear (some fixes delete/reshape logic)
# - ISC: implicit string concat rewrites
# - ICN: import-convention renames (can break APIs/expectations)
# - PGH: pragma hygiene (can drop ignores you rely on)
# - RUF015: list(...)[0] -> next(iter(...)) changes exception semantics
unfixable = ["B", "ISC", "ICN", "PGH", "RUF015"]

# Treat underscore / unused_* as intentionally unused.
dummy-variable-rgx = "^(_|unused_).*"

# Keep TODO/FIXME recognized as task comments.
task-tags = ["TODO", "FIXME"]

# Allow Ruff to add `from __future__ import annotations` when it enables safer fixes
future-annotations = true

# ==================================================================================================================== #
# DOCSTRING CONVENTION
# ==================================================================================================================== #
[lint.pydocstyle]
convention = "google"

# Keep doc/comment width aligned with code width.
 [lint.pycodestyle]
 max-doc-length = 120

# ==================================================================================================================== #
# IMPORT ORDERING
# ==================================================================================================================== #
[lint.isort]
known-first-party = ["ugit_diy"]
combine-as-imports = true
force-sort-within-sections = true
# lines-after-imports = 1   # optional: keep imports tight (PEP8 default = 2)

# ==================================================================================================================== #
# PYTEST BEST PRACTICES
# ==================================================================================================================== #
[lint.flake8-pytest-style]
fixture-parentheses = true            # Use @pytest.fixture() (with parens), even when no args are passed
parametrize-names-type = "tuple"      # Prefer tuple style: @pytest.mark.parametrize(("a","b"), [...])

# ==================================================================================================================== #
# IMPORT HYGIENE
# ==================================================================================================================== #
[lint.flake8-tidy-imports]
ban-relative-imports = "all"          # "all" | "parents" | "none"

# ==================================================================================================================== #
# BUILTINS SAFETY
# NOTE: builtins-ignorelist is deprecated — use 'ignorelist'.
# ==================================================================================================================== #
[lint.flake8-builtins]
ignorelist = []                       # add names to ignore only if absolutely necessary

# ==================================================================================================================== #
# SCOPED NOISE CONTROL
# ==================================================================================================================== #
[lint.per-file-ignores]
"tests/**" = ["F841", "S101"]       # allow unused vars and bare 'assert' in tests
"docs/**/*.py" = ["E402"]           # allow "import not at top" in docs
"**/__init__.py" = ["F401"]         # allow re-export patterns
# (Optional) If docstrings in tests are noisy:
# "tests/**" = ["D"]

# ==================================================================================================================== #
# OPINIONATED CODE STYLE (FORMATTER)
# ==================================================================================================================== #
[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = false              # Format code blocks inside docstrings as if they were Python
docstring-code-line-length = "dynamic"

# ==================================================================================================================== #
# TYPE-CHECKING IMPORTS
# Move imports used only for typing under `if TYPE_CHECKING`, and auto-quote annotations when needed.
# ==================================================================================================================== #
[lint.flake8-type-checking]
quote-annotations = true                 # If moving an import would break runtime, quote the annotation to make it safe.

# These are cheap/stdlib; keep them at runtime (don’t force into TYPE_CHECKING).
exempt-modules = ["typing", "typing_extensions", "collections.abc"]

runtime-evaluated-base-classes = []      # Add e.g. "pydantic.BaseModel" or "sqlalchemy.orm.DeclarativeBase" if you use them.
runtime-evaluated-decorators = []        # Add e.g. "pydantic.validate_call" etc. if present in your stack.
strict = true                            # Enforce TC001–TC003 even when a runtime import exists; pairs well with Pyright strict.
